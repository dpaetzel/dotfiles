;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     python
     rust
     (auto-completion
      :variables
      auto-completion-return-key-behavior 'complete
      auto-completion-tab-key-behavior nil
      auto-completion-enable-help-tooltip t
      auto-completion-enable-snippets-in-popup t)
     csv
     elm
     emacs-lisp
     finance ;; this provides ledger-mode
     git
     haskell
     ;; (haskell
     ;;  :variables
     ;;  haskell-completion-backend nil)
     html
     ;; ivy ;; this disables helm (and is more lightweight)
     java
     javascript
     (latex
      :variables
      latex-enable-auto-fill nil
      latex-enable-folding t)
     markdown
     nixos
     (org
      :variables
      org-enable-github-support t)
     php
     scala
     (shell
      :variables
      shell-default-height 30
      shell-default-position 'bottom
      shell-default-shell 'ansi-term)
     shell-scripts
     syntax-checking
     windows-scripts
     vimscript
     yaml)
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '()
     ;; magit-annex
     ;; muttrc-mode
     ;; nix-sandbox)
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))


(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style '(vim :variables
                                    vim-style-remap-Y-to-y$ t)

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner nil

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(solarized-dark
                         solarized-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Inconsolata-14"
                               :powerline-scale 1.1)
   ;; dotspacemacs-default-font '("Fira Code"
   ;;                             :size 16
   ;;                             :weight normal
   ;;                             :width normal
   ;;                             :powerline-scale 1.1)
   ;; dotspacemacs-default-font '("Hasklug Nerd Font"
   ;;                             :size 16
   ;;                             :weight normal
   ;;                             :width normal
   ;;                             :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state t

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar nil

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   ; TODO dotspacemacs-line-numbers 'relative
   dotspacemacs-line-numbers
    '(:relative t
      ;; :disabled-for-modes
        ;; dired-mode
        ;; doc-view-mode
        ;; markdown-mode
        ;; org-mode
        ;; pdf-view-mode
        ;; text-mode
      :size-limit-kb 1000)
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server t

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server t

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))


(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))


(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  )


(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
  )


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  ;; NOTE If a variable is buffer-local, then setq sets its local value in the
  ;; current buffer and setq-default sets the global default value. If a
  ;; variable is not buffer-local, then setq and setq-default do the same thing.


  ;; fixes the “<dead-acute> is not defined” problem but destroys the 3rd neo layer
  ;; (require 'iso-transl)

  ;; don't want to have emacs's dirty custom stuff in my spacemacs configuration
  (setq custom-file "~/.emacs.d/private/custom-settings.el")
  (load custom-file)


  ;; mappings
  (spacemacs/set-leader-keys
    "fq" 'server-edit
    "A" 'org-agenda
    "O" '(lambda () (interactive) (find-file "~/TODO.org"))
    "aog" 'org-clock-goto)
  (define-key evil-insert-state-map (kbd "<right>") 'hippie-expand)
  (define-key evil-normal-state-map (kbd "gh") 'evil-search-highlight-persist)
  (define-key evil-normal-state-map (kbd "C-i") 'evil-jump-forward)


  ;; misc
  (setq-default
   search-whitespace-regexp nil
   avy-keys '(?u ?i ?a ?e ?o ?s ?n ?r ?t ?d))


  ;; ui
  (global-whitespace-mode)
  (setq-default
   whitespace-style '(face trailing tabs)
   helm-ff-skip-boring-files t
   powerline-default-separator nil
   git-magit-status-fullscreen t)


  ;; behaviour
  (add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
  (setq-default
   evil-escape-key-sequence ""
   vc-follow-symlinks t
   evil-surround-pairs-alist
   (quote
    ((40 "( " . " )")
     (91 "[ " . " ]")
     (123 "{ " . " }")
     (41 "(" . ")")
     (93 "[" . "]")
     (125 "{" . "}")
     (35 "#{" . "}")
     (98 "(" . ")")
     (66 "{" . "}")
     (8222 "„" . "“")
     (8220 "“" . "”")
     (8218 "‚" . "‘")
     (8216 "‘" . "’")
     (62 "<" . ">")
     (116 . evil-surround-read-tag)
     (60 . evil-surround-read-tag)
     (102 . evil-surround-function)))
   magit-diff-use-overlays nil)


  ;; haskell
  (setq-default
   flycheck-disabled-checkers '(haskell-stack-ghc haskell-ghc haskell-lint))
  (spacemacs/set-leader-keys-for-major-mode 'haskell-mode
    "F" '(lambda ()
           (interactive)
           (shell-command (concat "ormolu --mode inplace "
                                  (buffer-file-name (current-buffer))))
           (kill-buffer "*Shell Command Output*")))


  ;; TeX
  (setq-default
   TeX-engine 'xetex
   TeX-auto-local ".auctex-auto"
   TeX-view-program-list (quote (("zathura" ("zathura %o") nil)))
   TeX-view-program-selection (quote
                               (((output-dvi has-no-display-manager)
                                 "dvi2tty")
                                ((output-dvi style-pstricks)
                                 "dvips and gv")
                                (output-dvi "xdvi")
                                (output-pdf "zathura")
                                (output-html "xdg-open"))))


  ;; ledger
  (setq-default
   flycheck-ledger-executable "hledger"
   ledger-use-iso-dates t)


  ;; netlogo
  (load-file "~/.emacs.d/private/netlogo-mode.el")


  ;; e-mail
  (load-file "~/.emacs.d/private/format-flowed.el")
  (add-hook 'message-mode-hook 'fix-flowed)
  (setq-default
   auto-mode-alist (append
                    '((".*\\.mail$" . message-mode)
                      ("neomutt[^/].*$" . message-mode))
                    auto-mode-alist))


  ;; org
  ;; used for recursively finding org files in projects folder
  (load-library "find-lisp")
  (with-eval-after-load 'org
    ;; (setcdr (assoc "\\.pdf\\'" org-file-apps) "zathura %s")
    (setq-default org-startup-indented nil)
    (evil-define-key 'normal evil-org-mode-map
      "T" '(lambda ()
             (interactive)
             (evil-org-eol-call
              (lambda() (org-insert-todo-heading-respect-content nil))))))
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "Q" 'org-clock-display
    "p" 'org-priority-up)
  (setq-default
   org-agenda-files
   (cons "~/TODO.org" (append
                       (find-lisp-find-files "/home/david/Projekte/" "\\.org$")
                       (find-lisp-find-files "/home/david/Literatur/" "\\.org$")))
   org-agenda-restore-windows-after-quit t
   org-agenda-skip-deadline-prewarning-if-scheduled 2
   org-agenda-skip-scheduled-if-done t
   org-agenda-tags-column -90
   org-bullets-bullet-list (quote ("*"))
   org-catch-invisible-edits (quote error)
   org-columns-default-format "%CATEGORY %40ITEM %TODO %SCHEDULED %DEADLINE %TAGS"
   org-directory "~/.gtd"
   org-hide-leading-stars t
   org-list-allow-alphabetical t
   org-log-into-drawer t
   org-pretty-entities t
   org-stuck-projects (quote ("+TODO=\"PROJECT\"" ("NEXT" "WAIT") nil ""))
   ;; '(org-tag-alist
   ;;   (quote
   ;;    ((:startgroup "Orte")
   ;;     ("daheim" . 104)
   ;;     ("Uni" . 117)
   ;;     ("alteUni" . 97)
   ;;     ("Bobingen" . 108)
   ;;     ("Stadt" . 115)
   ;;     (:endgroup)
   ;;     (:startgrouptag)
   ;;     ("Computer" . 99)
   ;;     (:grouptags)
   ;;     ("anaxagoras" . 120)
   ;;     ("heraklit" . 101)
   ;;     ("leukipp" . 105)
   ;;     ("cleopatra" . 111)
   ;;     ("Windows" . 119)
   ;;     (:endgrouptag)
   ;;     ("Film" . 109)
   ;;     (:startgrouptag "Personen")
   ;;     ("@Regine" . 82)
   ;;     ("@Eltern" . 69)
   ;;     (:endgrouptag "")
   ;;     ("Amazon" . 122)
   ;;     ("nachts" . 110)
   ;;     ("Hörbuch" . 246)
   ;;     ("Kochen" . 107)
   ;;     ("Gutschein" . 103)
   ;;     ("Besorgungen" . 98))))
   org-todo-keyword-faces (quote
                           (("TODO" :foreground "dim gray" :weight bold)
                            ("WAIT" :foreground "dim gray" :weight bold)
                            ("THEN" :foreground "dim gray" :weight bold)
                            ("MAYBE" :foreground "dim gray" :weight bold)))
   org-use-property-inheritance t)
  )


;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(evil-want-Y-yank-to-eol t)
   '(helm-boring-file-regexp-list
     (quote
      ("\\.hi$" "\\.o$" "~$" "\\.bin$" "\\.lbin$" "\\.so$" "\\.a$" "\\.ln$" "\\.blg$" "\\.bbl$" "\\.elc$" "\\.lof$" "\\.glo$" "\\.idx$" "\\.lot$" "\\.svn/?" "\\.hg/?" "\\.git/?" "\\.bzr/?" "CVS/?" "_darcs/?" "_MTN/?" "\\.tfm$" "\\.class$" "\\.fas$" "\\.lib$" "\\.mem$" "\\.x86f$" "\\.sparcf$" "\\.dfsl$" "\\.pfsl$" "\\.d64fsl$" "\\.p64fsl$" "\\.lx64fsl$" "\\.lx32fsl$" "\\.dx64fsl$" "\\.dx32fsl$" "\\.fx64fsl$" "\\.fx32fsl$" "\\.sx64fsl$" "\\.sx32fsl$" "\\.wx64fsl$" "\\.wx32fsl$" "\\.fasl$" "\\.ufsl$" "\\.fsl$" "\\.dxl$" "\\.lo$" "\\.la$" "\\.gmo$" "\\.mo$" "\\.toc$" "\\.aux$" "\\.cp$" "\\.fn$" "\\.ky$" "\\.pg$" "\\.tp$" "\\.vr$" "\\.cps$" "\\.fns$" "\\.kys$" "\\.pgs$" "\\.tps$" "\\.vrs$" "\\.pyc$" "\\.pyo$")))
   '(hl-todo-keyword-faces
     (quote
      (("TODO" . "#dc752f")
       ("NEXT" . "#dc752f")
       ("THEM" . "#2d9574")
       ("PROG" . "#4f97d7")
       ("OKAY" . "#4f97d7")
       ("DONT" . "#f2241f")
       ("FAIL" . "#f2241f")
       ("DONE" . "#86dc2f")
       ("NOTE" . "#b1951d")
       ("KLUDGE" . "#b1951d")
       ("HACK" . "#b1951d")
       ("TEMP" . "#b1951d")
       ("FIXME" . "#dc752f")
       ("XXX" . "#dc752f")
       ("XXXX" . "#dc752f")
       ("???" . "#dc752f"))))
   '(org-agenda-custom-commands
     (quote
      (("R" "wöchentliches Review"
        ((todo "WAIT"
               ((org-agenda-overriding-header "Warten auf")))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Actions")))
         (todo "TODO"
               ((org-agenda-overriding-header "andere TODOs (noch nicht als Next Action ausführbares etc.)")))
         (todo "THEN"
               ((org-agenda-overriding-header "TODOs, die von anderen abhängen")))
         (todo "MAYBE"
               ((org-agenda-overriding-header "Vielleicht/Eines Tages")))
         (todo "PROJECT"
               ((org-agenda-overriding-header "Projekte")))
         (stuck ""
                ((org-agenda-overriding-header "Projekte ohne NEXT oder WAIT")))
         (todo "DONE"
               ((org-agenda-overriding-header "Erledigtes"))))
        nil nil)
       ("p" "Alle Projekte" todo "PROJECT" nil)
       ("w" "Mein Workflow" tags "+Promotion"
        ((org-agenda-skip-function
          (quote
           (org-agenda-skip-entry-if
            (quote notscheduled))))))
       ("N" "Alle Next Actions" tags-todo "+TODO=\"NEXT\"-lesen" nil)
       ("n" "Alle Next Actions (Arbeit)" tags-todo "+TODO=\"NEXT\"-lesen-daheim" nil)
       ("A" "Agenda (Arbeit)"
        ((agenda ""
                 ((org-agenda-overriding-header "Arbeit")
                  (org-agenda-span
                   (quote day))
                  (org-agenda-skip-function
                   (quote
                    (org-agenda-skip-subtree-if
                     (quote regexp)
                     ":daheim:")))))
         (agenda ""
                 ((org-agenda-overriding-header "daheim")
                  (org-agenda-span
                   (quote day))
                  (org-agenda-skip-function
                   (quote
                    (org-agenda-skip-subtree-if
                     (quote notregexp)
                     ":daheim:"))))))
        nil))))
   '(org-agenda-files
     (quote
      ("~/TODO.org" "/home/david/Projekte/BA Jonas/BA Jonas.org" "/home/david/Projekte/Singsation/Termine.org" "/home/david/Projekte/Singsation/Proben.org" "/home/david/Projekte/Singsation/Links.org" "/home/david/Projekte/Singsation/2016-10-09 Diskussionsvorbereitung.org" "/home/david/Projekte/Singsation/Auftritte.org" "/home/david/Projekte/Singsation/Singsation.org" "/home/david/Projekte/Singsation/2016-09-25 Notizen zur Diskussion.org" "/home/david/Projekte/Singsation/2016-10-09 Nicht so gute Punkte.org" "/home/david/Projekte/Singsation/2019 Konzerttermine im Frühjahr.org" "/home/david/Projekte/Singsation/arranging/Say Something/Say Something.org" "/home/david/Projekte/Singsation/2017-01-08 Agenda.org" "/home/david/Projekte/Singsation/Stücke.org" "/home/david/Projekte/Singsation/2019-01-20 Probentag.org" "/home/david/Projekte/Singsation/2019-02-09 Ansage Konzert.org" "/home/david/Projekte/Singsation/Baba Yetu Aufnahmen.org" "/home/david/Projekte/Korrektur/Korrektur.org" "/home/david/Projekte/Korrektur/Bachelorarbeit-Kick-off.org" "/home/david/Projekte/Korrektur/Projektmodul.org" "/home/david/Projekte/Lesen/Lesen.org" "/home/david/Projekte/haxcs/haxcs.org" "/home/david/Projekte/haxcs/Code Style.org" "/home/david/Projekte/Unfall/Unfall.org" "/home/david/Projekte/Website/Website.org" "/home/david/Projekte/Hiwi Anastasia/Hiwi Anastasia.org" "/home/david/Projekte/RL-Vortrag/RL-Vortrag.org" "/home/david/Projekte/Grundwissen vertiefen/Grundwissen vertiefen.org" "/home/david/Projekte/BA Niklas/BA Niklas.org" "/home/david/Projekte/Fahrrad/Fahrrad.org" "/home/david/Projekte/GOC-Übung/GOC-Übung.org" "/home/david/Projekte/Finanzen/Finanzen.org" "/home/david/Projekte/Seminare/2017-WS Betreuung.org" "/home/david/Projekte/Seminare/Seminare.org" "/home/david/Projekte/Seminare/Erstes Gespräch.org" "/home/david/Projekte/Seminare/Vorgehen Seminararbeit.org" "/home/david/Projekte/Seminare/Seminarthemen.org" "/home/david/Projekte/Server/Server.org" "/home/david/Projekte/Keeping up/Keeping up.org" "/home/david/Projekte/Promotion/Recherche.org" "/home/david/Projekte/Promotion/Promotion.org" "/home/david/Projekte/Promotion/2017-09-26 Erstes Gespräch.org" "/home/david/Projekte/Persönliche Website/Persönliche Website.org" "/home/david/Projekte/PM Rusmin/PM Rusmin.org" "/home/david/Projekte/Demonstrator/Demonstrator.org" "/home/david/Literatur/lanzi2000/lanzi2000.org" "/home/david/Literatur/wender2012/wender2012.org" "/home/david/Literatur/butz2002/butz2002.org" "/home/david/Literatur/silver2017/silver2017.org" "/home/david/Literatur/drugowitsch2008a/drugowitsch2008a.org" "/home/david/Literatur/stalph2012/stalph2012.org" "/home/david/Literatur/pearlmutter2008/pearlmutter2008.org" "/home/david/Literatur/zaharia2010/zaharia2010.org" "/home/david/Literatur/gers1999/gers1999.org" "/home/david/Literatur/ioannides2011/ioannides2011.org" "/home/david/Literatur/gers2001/gers2001.org" "/home/david/Literatur/calma2016/calma2016.org" "/home/david/Literatur/hochreiter1997/hochreiter1997.org" "/home/david/Literatur/nakata2011/nakata2011.org" "/home/david/Literatur/stein2017/stein2017.org" "/home/david/Literatur/tatsumi2017/tatsumi2017.org" "/home/david/Literatur/drugowitsch2006a/drugowitsch2006a.org" "/home/david/Literatur/spivak2013/spivak2013.org" "/home/david/Literatur/butz20012/butz20012.org" "/home/david/Literatur/urbanowicz2009/urbanowicz2009.org" "/home/david/Literatur/nakata2018/nakata2018.org" "/home/david/Literatur/wadler1989/wadler1989.org" "/home/david/Literatur/hurst2001/hurst2001.org" "/home/david/Literatur/spivak2012/spivak2012.org" "/home/david/Literatur/liang1995/liang1995.org" "/home/david/Literatur/sutton2017/sutton2017.org" "/home/david/Literatur/nakata2015/nakata2015.org" "/home/david/Literatur/eibl2015/eibl2015.org" "/home/david/Literatur/miranda2017/miranda2017.org" "/home/david/Literatur/lanzi2001/lanzi2001.org" "/home/david/Literatur/butz2008/butz2008.org" "/home/david/Literatur/franco2010/franco2010.org" "/home/david/Literatur/calma2017/calma2017.org" "/home/david/Literatur/sutton.org" "/home/david/Literatur/cdoerr2018/cdoerr2018.org" "/home/david/Literatur/orriols-puig2006b/orriols-puig2006b.org" "/home/david/Literatur/drugowitsch2006b/drugowitsch2006b.org" "/home/david/Literatur/butz20013/butz20013.org" "/home/david/Literatur/kovacs1996/kovacs1996.org" "/home/david/Literatur/silver2016/silver2016.org" "/home/david/Literatur/bull2015/bull2015.org" "/home/david/Literatur/molina-markham2010/molina-markham2010.org" "/home/david/Literatur/knox2012/knox2012.org" "/home/david/Literatur/shi2015/shi2015.org" "/home/david/Literatur/nakata2017c/nakata2017c.org" "/home/david/Literatur/butz2001d/butz2001d.org" "/home/david/Literatur/wilson1998/wilson1998.org" "/home/david/Literatur/wilson2000/wilson2000.org" "/home/david/Literatur/graves2013/graves2013.org" "/home/david/Literatur/müller2017/müller2017.org" "/home/david/Literatur/nakata2012/nakata2012.org" "/home/david/Literatur/orriols-puig2006/orriols-puig2006.org" "/home/david/Literatur/dean2008/dean2008.org" "/home/david/Literatur/boyd2009/boyd2009.org" "/home/david/Literatur/drugowitsch2007b/drugowitsch2007b.org" "/home/david/Literatur/decraene2007/decraene2007.org" "/home/david/Literatur/kovacs2016/kovacs2016.org" "/home/david/Literatur/nakata2017a/nakata2017a.org" "/home/david/Literatur/butz2003a/butz2003a.org" "/home/david/Literatur/drugowitsch2007a/drugowitsch2007a.org" "/home/david/Literatur/nakata2012b/nakata2012b.org" "/home/david/Literatur/verma2018/verma2018.org" "/home/david/Literatur/shrivastava2004/shrivastava2004.org" "/home/david/Literatur/greveler2012/greveler2012.org" "/home/david/Literatur/lin2010/lin2010.org" "/home/david/Literatur/graves2016/graves2016.org" "/home/david/Literatur/nakata2017b/nakata2017b.org" "/home/david/Literatur/rial2012/rial2012.org" "/home/david/Literatur/nakata2015b/nakata2015b.org" "/home/david/Literatur/dixon2002/dixon2002.org" "/home/david/Literatur/sutton2018/sutton2018.org" "/home/david/Literatur/marlon2012/marlon2012.org" "/home/david/Literatur/reitmaier2013/reitmaier2013.org" "/home/david/Literatur/wada2005/wada2005.org" "/home/david/Literatur/hughes1989/hughes1989.org" "/home/david/Literatur/chu2006/chu2006.org" "/home/david/Literatur/iqbal2017/iqbal2017.org" "/home/david/Literatur/mellor2009/mellor2009.org" "/home/david/Literatur/felter2014/felter2014.org" "/home/david/Literatur/holland1978/holland1978.org" "/home/david/Literatur/mcbride2008/mcbride2008.org" "/home/david/Literatur/butz2005/butz2005.org" "/home/david/Literatur/deepmind2016/deepmind2016.org" "/home/david/Literatur/butz2001/butz2001.org" "/home/david/Literatur/day1977/day1977.org" "/home/david/Literatur/dalipi2016/dalipi2016.org" "/home/david/Literatur/deberg2008/deberg2008.org" "/home/david/Literatur/kovacs1999/kovacs1999.org" "/home/david/Literatur/orriols-puig2010/orriols-puig2010.org" "/home/david/Literatur/iqbal2012/iqbal2012.org" "/home/david/Literatur/wilson2002/wilson2002.org" "/home/david/Literatur/keshav2007/keshav2007.org" "/home/david/Literatur/iqbal2015/iqbal2015.org" "/home/david/Literatur/wadler2000/wadler2000.org" "/home/david/Literatur/holland1992/holland1992.org" "/home/david/Literatur/sankar2013/sankar2013.org" "/home/david/Literatur/petterson2016/petterson2016.org" "/home/david/Literatur/smith1990/smith1990.org" "/home/david/Literatur/wadler1990/wadler1990.org" "/home/david/Literatur/bull2003/bull2003.org" "/home/david/Literatur/garza-cuellar2017/garza-cuellar2017.org" "/home/david/Literatur/tan2013/tan2013.org" "/home/david/Literatur/zhang2017/zhang2017.org" "/home/david/Literatur/osullivan2008/osullivan2008.org" "/home/david/Literatur/lanzi2005/lanzi2005.org" "/home/david/Literatur/butz2005b/butz2005.org" "/home/david/Literatur/wilson2001/wilson2001.org" "/home/david/Literatur/ioannides2007/ioannides2007.org" "/home/david/Literatur/efthymiou2010/efthymiou2010.org" "/home/david/Literatur/gers2002/gers2002.org" "/home/david/Literatur/llora2006/llora2006.org" "/home/david/Literatur/bohli2010/bohli2010.org" "/home/david/Literatur/wilson1995/wilson1995.org" "/home/david/Literatur/kovacs1998a/kovacs1998a.org" "/home/david/Literatur/butz2004/butz2004.org" "/home/david/Literatur/butz2006/butz2006.org" "/home/david/Literatur/drugowitsch2008b/drugowitsch2008b.org" "/home/david/Literatur/lipschutz1968/lipschutz1968.org" "/home/david/Literatur/kalogridis2010/kalogridis2010.org" "/home/david/Literatur/lanzi2008/lanzi2008.org" "/home/david/Literatur/google2015/google2015.org" "/home/david/Literatur/orriols-puig2007/orriols-puig2007.org" "/home/david/Literatur/stalph2009a/stalph2009a.org" "/home/david/Literatur/edakunni2009/edakunni2009.org" "/home/david/Literatur/knuth1984/knuth1984.org" "/home/david/Literatur/rajagopalan2011/rajagopalan2011.org" "/home/david/Literatur/chung2014/chung2014.org" "/home/david/Literatur/hoare1983/hoare1983.org" "/home/david/Literatur/butz2000/butz2000.org" "/home/david/Literatur/bonarini2000/bonarini2000.org" "/home/david/Literatur/graves2014/graves2014.org" "/home/david/Literatur/butz2007/butz2007.org" "/home/david/Literatur/zhang2016a/zhang2016a.org" "/home/david/Literatur/baez2009/baez2009.org" "/home/david/Literatur/bull2002/bull2002.org" "/home/david/Literatur/erwig2006/erwig2006.org" "/home/david/Literatur/stalph2009b/stalph2009b.org" "/home/david/Literatur/butz2003b/butz2003b.org")))
   '(org-agenda-skip-function-global
     (quote
      (org-agenda-skip-entry-if
       (quote todo)
       (quote
        ("THEN")))))
   '(org-file-apps
     (quote
      ((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "zathura %s"))))
   '(org-latex-classes
     (quote
      (("scrartcl" "\\documentclass{scrartcl}"
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("article" "\\documentclass[11pt]{article}"
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("report" "\\documentclass[11pt]{report}"
        ("\\part{%s}" . "\\part*{%s}")
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
       ("book" "\\documentclass[11pt]{book}"
        ("\\part{%s}" . "\\part*{%s}")
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
   '(org-tag-alist
     (quote
      ((:startgroup)
       ("Arbeit" . 97)
       ("daheim" . 100)
       (:endgroup)
       ("Campus" . 99)
       ("lesen" . 108)
       ("anschauen" . 119))))
   '(org-todo-keywords
     (quote
      ((sequence "NEXT(n)" "TODO(t)" "PROJECT(p)" "WAIT(w)" "THEN(h)" "MAYBE(m)" "1(1)" "2(2)" "3(3)" "DONE(d!)"))))
   '(package-selected-packages
     (quote
      (magit-svn helm-git-grep gitignore-templates spinner undo-tree transient lv parent-mode flx anzu goto-chg reformatter diminish bind-map popup pkg-info f yapfify pyvenv pytest pyenv-mode py-isort pip-requirements live-py-mode hy-mode helm-pydoc cython-mode company-anaconda anaconda-mode pythonic ox-gfm toml-mode racer flycheck-rust cargo rust-mode company-quickhelp bind-key powerline avy packed hydra iedit epl s org-mime smartparens highlight evil helm helm-core projectile async csv-mode haskell-snippets flycheck-haskell haskell-mode company-emacs-eclim eclim yaml-mode xterm-color web-mode web-beautify vimrc-mode tagedit slim-mode shell-pop scss-mode sass-mode pug-mode powershell phpunit phpcbf php-extras php-auto-yasnippets org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-download noflet nix-sandbox nix-mode muttrc-mode multi-term mmm-mode markdown-toc markdown-mode magit-annex livid-mode skewer-mode simple-httpd less-css-mode ledger-mode json-mode json-snatcher json-reformat js2-refactor multiple-cursors js2-mode js-doc intero insert-shebang htmlize hlint-refactor hindent helm-nixos-options helm-hoogle helm-css-scss helm-company helm-c-yasnippet haml-mode gnuplot gh-md fuzzy flycheck-pos-tip pos-tip flycheck-ledger flycheck-elm flycheck fish-mode eshell-z eshell-prompt-extras esh-help ensime sbt-mode scala-mode emmet-mode elm-mode drupal-mode php-mode dactyl-mode company-web web-completion-data company-tern dash-functional tern company-statistics company-shell company-nixos-options nixos-options company-ghci company-ghc ghc company-cabal company-auctex company coffee-mode cmm-mode auto-yasnippet yasnippet auctex-latexmk auctex ac-ispell auto-complete smeargle orgit magit-gitflow helm-gitignore gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link evil-magit magit magit-popup git-commit ghub let-alist with-editor ws-butler winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spaceline restart-emacs request rainbow-delimiters popwin persp-mode pcre2el paradox org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum linum-relative link-hint info+ indent-guide hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu elisp-slime-nav dumb-jump define-word column-enforce-mode clean-aindent-mode auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line)))
   '(pdf-view-midnight-colors (quote ("#b2b2b2" . "#292b2e")))
   '(yas-indent-line (quote fixed)))


  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
   '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
   '(org-level-1 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-2 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-3 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-4 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-5 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-6 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-7 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-8 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0))))
   '(org-level-9 ((t (:family "Inconsolata" :inherit variable-pitch :height 1.0)))))
  )
